// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UITests.Scenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Products.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Products", "\tTo ensure data is displayed correctly I want to verify all information is displa" +
                    "yed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Products")))
            {
                global::UITests.Scenarios.ProductsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Name",
                        "ImageId",
                        "Count"});
            table1.AddRow(new string[] {
                        "1XS5",
                        "Beach ball",
                        "beach-ball.png",
                        "100"});
            table1.AddRow(new string[] {
                        "556X",
                        "Bear",
                        "bear.png",
                        "2"});
            table1.AddRow(new string[] {
                        "A2",
                        "Bike",
                        "bike.png",
                        "10"});
            table1.AddRow(new string[] {
                        "T42",
                        "Plank",
                        "plank.png",
                        "76"});
            table1.AddRow(new string[] {
                        "T21",
                        "Stunt Step",
                        "stuntstep.png",
                        "901"});
#line 5
 testRunner.Given("the following product information is available", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Display all products")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Products")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("products")]
        public virtual void DisplayAllProducts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display all products", new string[] {
                        "products"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 15
 testRunner.When("I look at the \'home\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Name",
                        "ImageId",
                        "Count"});
            table2.AddRow(new string[] {
                        "1XS5",
                        "Beach ball",
                        "beach-ball.png",
                        "100"});
            table2.AddRow(new string[] {
                        "556X",
                        "Bear",
                        "bear.png",
                        "2"});
            table2.AddRow(new string[] {
                        "A2",
                        "Bike",
                        "bike.png",
                        "10"});
            table2.AddRow(new string[] {
                        "T42",
                        "Plank",
                        "plank.png",
                        "76"});
            table2.AddRow(new string[] {
                        "T21",
                        "Stunt Step",
                        "stuntstep.png",
                        "901"});
#line 16
 testRunner.Then("I see the following products", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Display products with missing images")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Products")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("products")]
        public virtual void DisplayProductsWithMissingImages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display products with missing images", new string[] {
                        "products"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Name",
                        "ImageId",
                        "Count"});
            table3.AddRow(new string[] {
                        "SCRW",
                        "Screw",
                        "non_existing_image.png",
                        "2"});
#line 26
 testRunner.Given("the following product information is available", ((string)(null)), table3, "Given ");
#line 29
 testRunner.When("I look at the \'home\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Name",
                        "ImageText",
                        "Count"});
            table4.AddRow(new string[] {
                        "SCRW",
                        "Screw",
                        "No image available",
                        "2"});
#line 30
 testRunner.Then("I see the following products", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Display no products when backend is unavailable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Products")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("products")]
        public virtual void DisplayNoProductsWhenBackendIsUnavailable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display no products when backend is unavailable", new string[] {
                        "products"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 36
 testRunner.Given("the backend is unavailable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.When("I look at the \'home\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("I see the message \'No products found :(\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
